package com.speedystone.greendaodemo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import xyz.wendyltanpcy.formulaapplication.Model.Formula;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FORMULA".
*/
public class FormulaDao extends AbstractDao<Formula, Long> {

    public static final String TABLENAME = "FORMULA";

    /**
     * Properties of entity Formula.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FormulaBody = new Property(0, String.class, "formulaBody", false, "FORMULA_BODY");
        public final static Property FormulaName = new Property(1, String.class, "formulaName", false, "FORMULA_NAME");
        public final static Property IsChecked = new Property(2, boolean.class, "isChecked", false, "IS_CHECKED");
        public final static Property FormulaUnit = new Property(3, String.class, "formulaUnit", false, "FORMULA_UNIT");
        public final static Property Id = new Property(4, long.class, "id", true, "_id");
    }


    public FormulaDao(DaoConfig config) {
        super(config);
    }
    
    public FormulaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FORMULA\" (" + //
                "\"FORMULA_BODY\" TEXT," + // 0: formulaBody
                "\"FORMULA_NAME\" TEXT," + // 1: formulaName
                "\"IS_CHECKED\" INTEGER NOT NULL ," + // 2: isChecked
                "\"FORMULA_UNIT\" TEXT," + // 3: formulaUnit
                "\"_id\" INTEGER PRIMARY KEY NOT NULL );"); // 4: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FORMULA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Formula entity) {
        stmt.clearBindings();
 
        String formulaBody = entity.getFormulaBody();
        if (formulaBody != null) {
            stmt.bindString(1, formulaBody);
        }
 
        String formulaName = entity.getFormulaName();
        if (formulaName != null) {
            stmt.bindString(2, formulaName);
        }
        stmt.bindLong(3, entity.getIsChecked() ? 1L: 0L);
 
        String formulaUnit = entity.getFormulaUnit();
        if (formulaUnit != null) {
            stmt.bindString(4, formulaUnit);
        }
        stmt.bindLong(5, entity.getId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Formula entity) {
        stmt.clearBindings();
 
        String formulaBody = entity.getFormulaBody();
        if (formulaBody != null) {
            stmt.bindString(1, formulaBody);
        }
 
        String formulaName = entity.getFormulaName();
        if (formulaName != null) {
            stmt.bindString(2, formulaName);
        }
        stmt.bindLong(3, entity.getIsChecked() ? 1L: 0L);
 
        String formulaUnit = entity.getFormulaUnit();
        if (formulaUnit != null) {
            stmt.bindString(4, formulaUnit);
        }
        stmt.bindLong(5, entity.getId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 4);
    }    

    @Override
    public Formula readEntity(Cursor cursor, int offset) {
        Formula entity = new Formula( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // formulaBody
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // formulaName
            cursor.getShort(offset + 2) != 0, // isChecked
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // formulaUnit
            cursor.getLong(offset + 4) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Formula entity, int offset) {
        entity.setFormulaBody(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFormulaName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsChecked(cursor.getShort(offset + 2) != 0);
        entity.setFormulaUnit(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setId(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Formula entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Formula entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Formula entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
